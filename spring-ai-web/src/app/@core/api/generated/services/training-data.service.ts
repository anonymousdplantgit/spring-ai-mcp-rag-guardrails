/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { deleteTrainingData } from '../fn/training-data/delete-training-data';
import { DeleteTrainingData$Params } from '../fn/training-data/delete-training-data';
import { getTrainingData } from '../fn/training-data/get-training-data';
import { GetTrainingData$Params } from '../fn/training-data/get-training-data';
import { getTrainingData1 } from '../fn/training-data/get-training-data-1';
import { GetTrainingData1$Params } from '../fn/training-data/get-training-data-1';
import { PageTrainingDataResource } from '../models/page-training-data-resource';
import { saveTrainingData } from '../fn/training-data/save-training-data';
import { SaveTrainingData$Params } from '../fn/training-data/save-training-data';
import { searchTrainingData } from '../fn/training-data/search-training-data';
import { SearchTrainingData$Params } from '../fn/training-data/search-training-data';
import { TrainingDataResource } from '../models/training-data-resource';


/**
 * Manage training data in the system
 */
@Injectable({ providedIn: 'root' })
export class TrainingDataService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getTrainingData()` */
  static readonly GetTrainingDataPath = '/api/training-data';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getTrainingData()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTrainingData$Response(params: GetTrainingData$Params, context?: HttpContext): Observable<StrictHttpResponse<PageTrainingDataResource>> {
    return getTrainingData(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getTrainingData$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTrainingData(params: GetTrainingData$Params, context?: HttpContext): Observable<PageTrainingDataResource> {
    return this.getTrainingData$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageTrainingDataResource>): PageTrainingDataResource => r.body)
    );
  }

  /** Path part for operation `saveTrainingData()` */
  static readonly SaveTrainingDataPath = '/api/training-data';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `saveTrainingData()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  saveTrainingData$Response(params: SaveTrainingData$Params, context?: HttpContext): Observable<StrictHttpResponse<TrainingDataResource>> {
    return saveTrainingData(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `saveTrainingData$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  saveTrainingData(params: SaveTrainingData$Params, context?: HttpContext): Observable<TrainingDataResource> {
    return this.saveTrainingData$Response(params, context).pipe(
      map((r: StrictHttpResponse<TrainingDataResource>): TrainingDataResource => r.body)
    );
  }

  /** Path part for operation `getTrainingData1()` */
  static readonly GetTrainingData1Path = '/api/training-data/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getTrainingData1()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTrainingData1$Response(params: GetTrainingData1$Params, context?: HttpContext): Observable<StrictHttpResponse<TrainingDataResource>> {
    return getTrainingData1(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getTrainingData1$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTrainingData1(params: GetTrainingData1$Params, context?: HttpContext): Observable<TrainingDataResource> {
    return this.getTrainingData1$Response(params, context).pipe(
      map((r: StrictHttpResponse<TrainingDataResource>): TrainingDataResource => r.body)
    );
  }

  /** Path part for operation `deleteTrainingData()` */
  static readonly DeleteTrainingDataPath = '/api/training-data/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteTrainingData()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteTrainingData$Response(params: DeleteTrainingData$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteTrainingData(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteTrainingData$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteTrainingData(params: DeleteTrainingData$Params, context?: HttpContext): Observable<void> {
    return this.deleteTrainingData$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `searchTrainingData()` */
  static readonly SearchTrainingDataPath = '/api/training-data/search';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `searchTrainingData()` instead.
   *
   * This method doesn't expect any request body.
   */
  searchTrainingData$Response(params: SearchTrainingData$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<TrainingDataResource>>> {
    return searchTrainingData(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `searchTrainingData$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  searchTrainingData(params: SearchTrainingData$Params, context?: HttpContext): Observable<Array<TrainingDataResource>> {
    return this.searchTrainingData$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<TrainingDataResource>>): Array<TrainingDataResource> => r.body)
    );
  }

}
