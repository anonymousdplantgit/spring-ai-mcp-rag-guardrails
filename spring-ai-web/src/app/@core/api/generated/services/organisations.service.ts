/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { deleteOrganisation } from '../fn/organisations/delete-organisation';
import { DeleteOrganisation$Params } from '../fn/organisations/delete-organisation';
import { getOrganisation } from '../fn/organisations/get-organisation';
import { GetOrganisation$Params } from '../fn/organisations/get-organisation';
import { OrganizationResource } from '../models/organization-resource';
import { saveOrganisation } from '../fn/organisations/save-organisation';
import { SaveOrganisation$Params } from '../fn/organisations/save-organisation';
import { searchOrganisations } from '../fn/organisations/search-organisations';
import { SearchOrganisations$Params } from '../fn/organisations/search-organisations';


/**
 * Manage organisations in the system
 */
@Injectable({ providedIn: 'root' })
export class OrganisationsService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `saveOrganisation()` */
  static readonly SaveOrganisationPath = '/api/organisations';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `saveOrganisation()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  saveOrganisation$Response(params: SaveOrganisation$Params, context?: HttpContext): Observable<StrictHttpResponse<OrganizationResource>> {
    return saveOrganisation(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `saveOrganisation$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  saveOrganisation(params: SaveOrganisation$Params, context?: HttpContext): Observable<OrganizationResource> {
    return this.saveOrganisation$Response(params, context).pipe(
      map((r: StrictHttpResponse<OrganizationResource>): OrganizationResource => r.body)
    );
  }

  /** Path part for operation `getOrganisation()` */
  static readonly GetOrganisationPath = '/api/organisations/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getOrganisation()` instead.
   *
   * This method doesn't expect any request body.
   */
  getOrganisation$Response(params: GetOrganisation$Params, context?: HttpContext): Observable<StrictHttpResponse<OrganizationResource>> {
    return getOrganisation(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getOrganisation$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getOrganisation(params: GetOrganisation$Params, context?: HttpContext): Observable<OrganizationResource> {
    return this.getOrganisation$Response(params, context).pipe(
      map((r: StrictHttpResponse<OrganizationResource>): OrganizationResource => r.body)
    );
  }

  /** Path part for operation `deleteOrganisation()` */
  static readonly DeleteOrganisationPath = '/api/organisations/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteOrganisation()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteOrganisation$Response(params: DeleteOrganisation$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteOrganisation(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteOrganisation$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteOrganisation(params: DeleteOrganisation$Params, context?: HttpContext): Observable<void> {
    return this.deleteOrganisation$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `searchOrganisations()` */
  static readonly SearchOrganisationsPath = '/api/organisations/search';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `searchOrganisations()` instead.
   *
   * This method doesn't expect any request body.
   */
  searchOrganisations$Response(params: SearchOrganisations$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<OrganizationResource>>> {
    return searchOrganisations(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `searchOrganisations$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  searchOrganisations(params: SearchOrganisations$Params, context?: HttpContext): Observable<Array<OrganizationResource>> {
    return this.searchOrganisations$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<OrganizationResource>>): Array<OrganizationResource> => r.body)
    );
  }

}
