/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { BotStatistics } from '../models/bot-statistics';
import { ConversationSummaryReport } from '../models/conversation-summary-report';
import { exportStatistics } from '../fn/statistics/export-statistics';
import { ExportStatistics$Params } from '../fn/statistics/export-statistics';
import { getBotStatistics } from '../fn/statistics/get-bot-statistics';
import { GetBotStatistics$Params } from '../fn/statistics/get-bot-statistics';
import { getConversationSummary } from '../fn/statistics/get-conversation-summary';
import { GetConversationSummary$Params } from '../fn/statistics/get-conversation-summary';
import { getDailyActivity } from '../fn/statistics/get-daily-activity';
import { GetDailyActivity$Params } from '../fn/statistics/get-daily-activity';
import { getEngagementMetrics } from '../fn/statistics/get-engagement-metrics';
import { GetEngagementMetrics$Params } from '../fn/statistics/get-engagement-metrics';
import { getHourlyActivity } from '../fn/statistics/get-hourly-activity';
import { GetHourlyActivity$Params } from '../fn/statistics/get-hourly-activity';
import { getPerformanceMetrics } from '../fn/statistics/get-performance-metrics';
import { GetPerformanceMetrics$Params } from '../fn/statistics/get-performance-metrics';
import { getPopularTopics } from '../fn/statistics/get-popular-topics';
import { GetPopularTopics$Params } from '../fn/statistics/get-popular-topics';
import { getTokenUsage } from '../fn/statistics/get-token-usage';
import { GetTokenUsage$Params } from '../fn/statistics/get-token-usage';


/**
 * Analytics and statistics for chatbots
 */
@Injectable({ providedIn: 'root' })
export class StatisticsService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getBotStatistics()` */
  static readonly GetBotStatisticsPath = '/api/statistics/bot/{botId}';

  /**
   * Get bot statistics.
   *
   * Get comprehensive statistics for a specific bot
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getBotStatistics()` instead.
   *
   * This method doesn't expect any request body.
   */
  getBotStatistics$Response(params: GetBotStatistics$Params, context?: HttpContext): Observable<StrictHttpResponse<BotStatistics>> {
    return getBotStatistics(this.http, this.rootUrl, params, context);
  }

  /**
   * Get bot statistics.
   *
   * Get comprehensive statistics for a specific bot
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getBotStatistics$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getBotStatistics(params: GetBotStatistics$Params, context?: HttpContext): Observable<BotStatistics> {
    return this.getBotStatistics$Response(params, context).pipe(
      map((r: StrictHttpResponse<BotStatistics>): BotStatistics => r.body)
    );
  }

  /** Path part for operation `getPopularTopics()` */
  static readonly GetPopularTopicsPath = '/api/statistics/bot/{botId}/topics';

  /**
   * Get popular topics.
   *
   * Get most discussed topics for a bot
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getPopularTopics()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPopularTopics$Response(params: GetPopularTopics$Params, context?: HttpContext): Observable<StrictHttpResponse<{
[key: string]: number;
}>> {
    return getPopularTopics(this.http, this.rootUrl, params, context);
  }

  /**
   * Get popular topics.
   *
   * Get most discussed topics for a bot
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getPopularTopics$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPopularTopics(params: GetPopularTopics$Params, context?: HttpContext): Observable<{
[key: string]: number;
}> {
    return this.getPopularTopics$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
[key: string]: number;
}>): {
[key: string]: number;
} => r.body)
    );
  }

  /** Path part for operation `getTokenUsage()` */
  static readonly GetTokenUsagePath = '/api/statistics/bot/{botId}/tokens';

  /**
   * Get token usage.
   *
   * Get token usage statistics for a bot
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getTokenUsage()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTokenUsage$Response(params: GetTokenUsage$Params, context?: HttpContext): Observable<StrictHttpResponse<{
[key: string]: number;
}>> {
    return getTokenUsage(this.http, this.rootUrl, params, context);
  }

  /**
   * Get token usage.
   *
   * Get token usage statistics for a bot
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getTokenUsage$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTokenUsage(params: GetTokenUsage$Params, context?: HttpContext): Observable<{
[key: string]: number;
}> {
    return this.getTokenUsage$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
[key: string]: number;
}>): {
[key: string]: number;
} => r.body)
    );
  }

  /** Path part for operation `getConversationSummary()` */
  static readonly GetConversationSummaryPath = '/api/statistics/bot/{botId}/summary';

  /**
   * Get conversation summary.
   *
   * Get conversation summary for a date range
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getConversationSummary()` instead.
   *
   * This method doesn't expect any request body.
   */
  getConversationSummary$Response(params: GetConversationSummary$Params, context?: HttpContext): Observable<StrictHttpResponse<ConversationSummaryReport>> {
    return getConversationSummary(this.http, this.rootUrl, params, context);
  }

  /**
   * Get conversation summary.
   *
   * Get conversation summary for a date range
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getConversationSummary$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getConversationSummary(params: GetConversationSummary$Params, context?: HttpContext): Observable<ConversationSummaryReport> {
    return this.getConversationSummary$Response(params, context).pipe(
      map((r: StrictHttpResponse<ConversationSummaryReport>): ConversationSummaryReport => r.body)
    );
  }

  /** Path part for operation `getPerformanceMetrics()` */
  static readonly GetPerformanceMetricsPath = '/api/statistics/bot/{botId}/performance';

  /**
   * Get performance metrics.
   *
   * Get performance metrics for a bot
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getPerformanceMetrics()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPerformanceMetrics$Response(params: GetPerformanceMetrics$Params, context?: HttpContext): Observable<StrictHttpResponse<{
[key: string]: {
};
}>> {
    return getPerformanceMetrics(this.http, this.rootUrl, params, context);
  }

  /**
   * Get performance metrics.
   *
   * Get performance metrics for a bot
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getPerformanceMetrics$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPerformanceMetrics(params: GetPerformanceMetrics$Params, context?: HttpContext): Observable<{
[key: string]: {
};
}> {
    return this.getPerformanceMetrics$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
[key: string]: {
};
}>): {
[key: string]: {
};
} => r.body)
    );
  }

  /** Path part for operation `exportStatistics()` */
  static readonly ExportStatisticsPath = '/api/statistics/bot/{botId}/export';

  /**
   * Export statistics.
   *
   * Export bot statistics to CSV format
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `exportStatistics()` instead.
   *
   * This method doesn't expect any request body.
   */
  exportStatistics$Response(params: ExportStatistics$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return exportStatistics(this.http, this.rootUrl, params, context);
  }

  /**
   * Export statistics.
   *
   * Export bot statistics to CSV format
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `exportStatistics$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  exportStatistics(params: ExportStatistics$Params, context?: HttpContext): Observable<string> {
    return this.exportStatistics$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `getEngagementMetrics()` */
  static readonly GetEngagementMetricsPath = '/api/statistics/bot/{botId}/engagement';

  /**
   * Get engagement metrics.
   *
   * Get user engagement metrics for a bot
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getEngagementMetrics()` instead.
   *
   * This method doesn't expect any request body.
   */
  getEngagementMetrics$Response(params: GetEngagementMetrics$Params, context?: HttpContext): Observable<StrictHttpResponse<{
[key: string]: {
};
}>> {
    return getEngagementMetrics(this.http, this.rootUrl, params, context);
  }

  /**
   * Get engagement metrics.
   *
   * Get user engagement metrics for a bot
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getEngagementMetrics$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getEngagementMetrics(params: GetEngagementMetrics$Params, context?: HttpContext): Observable<{
[key: string]: {
};
}> {
    return this.getEngagementMetrics$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
[key: string]: {
};
}>): {
[key: string]: {
};
} => r.body)
    );
  }

  /** Path part for operation `getHourlyActivity()` */
  static readonly GetHourlyActivityPath = '/api/statistics/bot/{botId}/activity/hourly';

  /**
   * Get hourly activity.
   *
   * Get hourly message activity for a bot
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getHourlyActivity()` instead.
   *
   * This method doesn't expect any request body.
   */
  getHourlyActivity$Response(params: GetHourlyActivity$Params, context?: HttpContext): Observable<StrictHttpResponse<{
[key: string]: number;
}>> {
    return getHourlyActivity(this.http, this.rootUrl, params, context);
  }

  /**
   * Get hourly activity.
   *
   * Get hourly message activity for a bot
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getHourlyActivity$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getHourlyActivity(params: GetHourlyActivity$Params, context?: HttpContext): Observable<{
[key: string]: number;
}> {
    return this.getHourlyActivity$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
[key: string]: number;
}>): {
[key: string]: number;
} => r.body)
    );
  }

  /** Path part for operation `getDailyActivity()` */
  static readonly GetDailyActivityPath = '/api/statistics/bot/{botId}/activity/daily';

  /**
   * Get daily activity.
   *
   * Get daily message activity for a bot
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getDailyActivity()` instead.
   *
   * This method doesn't expect any request body.
   */
  getDailyActivity$Response(params: GetDailyActivity$Params, context?: HttpContext): Observable<StrictHttpResponse<{
[key: string]: number;
}>> {
    return getDailyActivity(this.http, this.rootUrl, params, context);
  }

  /**
   * Get daily activity.
   *
   * Get daily message activity for a bot
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getDailyActivity$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getDailyActivity(params: GetDailyActivity$Params, context?: HttpContext): Observable<{
[key: string]: number;
}> {
    return this.getDailyActivity$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
[key: string]: number;
}>): {
[key: string]: number;
} => r.body)
    );
  }

}
