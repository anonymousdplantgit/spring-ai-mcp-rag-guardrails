/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { ChatbotResource } from '../models/chatbot-resource';
import { ChatResponse } from '../models/chat-response';
import { clearBotKnowledgeBase } from '../fn/chat-bots/clear-bot-knowledge-base';
import { ClearBotKnowledgeBase$Params } from '../fn/chat-bots/clear-bot-knowledge-base';
import { findChatbots } from '../fn/chat-bots/find-chatbots';
import { FindChatbots$Params } from '../fn/chat-bots/find-chatbots';
import { getAllChatbots } from '../fn/chat-bots/get-all-chatbots';
import { GetAllChatbots$Params } from '../fn/chat-bots/get-all-chatbots';
import { getChatbot } from '../fn/chat-bots/get-chatbot';
import { GetChatbot$Params } from '../fn/chat-bots/get-chatbot';
import { PageChatbotResource } from '../models/page-chatbot-resource';
import { ragChat } from '../fn/chat-bots/rag-chat';
import { RagChat$Params } from '../fn/chat-bots/rag-chat';
import { saveChatbot } from '../fn/chat-bots/save-chatbot';
import { SaveChatbot$Params } from '../fn/chat-bots/save-chatbot';
import { uploadDocument } from '../fn/chat-bots/upload-document';
import { UploadDocument$Params } from '../fn/chat-bots/upload-document';


/**
 * Manage Chatbots in the system
 */
@Injectable({ providedIn: 'root' })
export class ChatBotsService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getAllChatbots()` */
  static readonly GetAllChatbotsPath = '/api/chatbots';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllChatbots()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllChatbots$Response(params?: GetAllChatbots$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<ChatbotResource>>> {
    return getAllChatbots(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllChatbots$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllChatbots(params?: GetAllChatbots$Params, context?: HttpContext): Observable<Array<ChatbotResource>> {
    return this.getAllChatbots$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<ChatbotResource>>): Array<ChatbotResource> => r.body)
    );
  }

  /** Path part for operation `saveChatbot()` */
  static readonly SaveChatbotPath = '/api/chatbots';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `saveChatbot()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  saveChatbot$Response(params: SaveChatbot$Params, context?: HttpContext): Observable<StrictHttpResponse<ChatbotResource>> {
    return saveChatbot(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `saveChatbot$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  saveChatbot(params: SaveChatbot$Params, context?: HttpContext): Observable<ChatbotResource> {
    return this.saveChatbot$Response(params, context).pipe(
      map((r: StrictHttpResponse<ChatbotResource>): ChatbotResource => r.body)
    );
  }

  /** Path part for operation `uploadDocument()` */
  static readonly UploadDocumentPath = '/api/chatbots/upload-document';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `uploadDocument()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  uploadDocument$Response(params: UploadDocument$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return uploadDocument(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `uploadDocument$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  uploadDocument(params: UploadDocument$Params, context?: HttpContext): Observable<void> {
    return this.uploadDocument$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `ragChat()` */
  static readonly RagChatPath = '/api/chatbots/rag';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `ragChat()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  ragChat$Response(params: RagChat$Params, context?: HttpContext): Observable<StrictHttpResponse<ChatResponse>> {
    return ragChat(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `ragChat$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  ragChat(params: RagChat$Params, context?: HttpContext): Observable<ChatResponse> {
    return this.ragChat$Response(params, context).pipe(
      map((r: StrictHttpResponse<ChatResponse>): ChatResponse => r.body)
    );
  }

  /** Path part for operation `getChatbot()` */
  static readonly GetChatbotPath = '/api/chatbots/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getChatbot()` instead.
   *
   * This method doesn't expect any request body.
   */
  getChatbot$Response(params: GetChatbot$Params, context?: HttpContext): Observable<StrictHttpResponse<ChatbotResource>> {
    return getChatbot(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getChatbot$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getChatbot(params: GetChatbot$Params, context?: HttpContext): Observable<ChatbotResource> {
    return this.getChatbot$Response(params, context).pipe(
      map((r: StrictHttpResponse<ChatbotResource>): ChatbotResource => r.body)
    );
  }

  /** Path part for operation `findChatbots()` */
  static readonly FindChatbotsPath = '/api/chatbots/paged';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findChatbots()` instead.
   *
   * This method doesn't expect any request body.
   */
  findChatbots$Response(params: FindChatbots$Params, context?: HttpContext): Observable<StrictHttpResponse<PageChatbotResource>> {
    return findChatbots(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findChatbots$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findChatbots(params: FindChatbots$Params, context?: HttpContext): Observable<PageChatbotResource> {
    return this.findChatbots$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageChatbotResource>): PageChatbotResource => r.body)
    );
  }

  /** Path part for operation `clearBotKnowledgeBase()` */
  static readonly ClearBotKnowledgeBasePath = '/api/chatbots/{botId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `clearBotKnowledgeBase()` instead.
   *
   * This method doesn't expect any request body.
   */
  clearBotKnowledgeBase$Response(params: ClearBotKnowledgeBase$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return clearBotKnowledgeBase(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `clearBotKnowledgeBase$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  clearBotKnowledgeBase(params: ClearBotKnowledgeBase$Params, context?: HttpContext): Observable<void> {
    return this.clearBotKnowledgeBase$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
