/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { ConversationResource } from '../models/conversation-resource';
import { deleteConversation } from '../fn/conversations/delete-conversation';
import { DeleteConversation$Params } from '../fn/conversations/delete-conversation';
import { getConversation } from '../fn/conversations/get-conversation';
import { GetConversation$Params } from '../fn/conversations/get-conversation';
import { getConversations } from '../fn/conversations/get-conversations';
import { GetConversations$Params } from '../fn/conversations/get-conversations';
import { PageConversationResource } from '../models/page-conversation-resource';
import { saveConversation } from '../fn/conversations/save-conversation';
import { SaveConversation$Params } from '../fn/conversations/save-conversation';
import { searchConversations } from '../fn/conversations/search-conversations';
import { SearchConversations$Params } from '../fn/conversations/search-conversations';


/**
 * Manage conversations in the system
 */
@Injectable({ providedIn: 'root' })
export class ConversationsService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getConversations()` */
  static readonly GetConversationsPath = '/api/conversations';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getConversations()` instead.
   *
   * This method doesn't expect any request body.
   */
  getConversations$Response(params: GetConversations$Params, context?: HttpContext): Observable<StrictHttpResponse<PageConversationResource>> {
    return getConversations(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getConversations$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getConversations(params: GetConversations$Params, context?: HttpContext): Observable<PageConversationResource> {
    return this.getConversations$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageConversationResource>): PageConversationResource => r.body)
    );
  }

  /** Path part for operation `saveConversation()` */
  static readonly SaveConversationPath = '/api/conversations';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `saveConversation()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  saveConversation$Response(params: SaveConversation$Params, context?: HttpContext): Observable<StrictHttpResponse<ConversationResource>> {
    return saveConversation(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `saveConversation$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  saveConversation(params: SaveConversation$Params, context?: HttpContext): Observable<ConversationResource> {
    return this.saveConversation$Response(params, context).pipe(
      map((r: StrictHttpResponse<ConversationResource>): ConversationResource => r.body)
    );
  }

  /** Path part for operation `getConversation()` */
  static readonly GetConversationPath = '/api/conversations/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getConversation()` instead.
   *
   * This method doesn't expect any request body.
   */
  getConversation$Response(params: GetConversation$Params, context?: HttpContext): Observable<StrictHttpResponse<ConversationResource>> {
    return getConversation(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getConversation$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getConversation(params: GetConversation$Params, context?: HttpContext): Observable<ConversationResource> {
    return this.getConversation$Response(params, context).pipe(
      map((r: StrictHttpResponse<ConversationResource>): ConversationResource => r.body)
    );
  }

  /** Path part for operation `deleteConversation()` */
  static readonly DeleteConversationPath = '/api/conversations/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteConversation()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteConversation$Response(params: DeleteConversation$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteConversation(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteConversation$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteConversation(params: DeleteConversation$Params, context?: HttpContext): Observable<void> {
    return this.deleteConversation$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `searchConversations()` */
  static readonly SearchConversationsPath = '/api/conversations/search';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `searchConversations()` instead.
   *
   * This method doesn't expect any request body.
   */
  searchConversations$Response(params: SearchConversations$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<ConversationResource>>> {
    return searchConversations(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `searchConversations$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  searchConversations(params: SearchConversations$Params, context?: HttpContext): Observable<Array<ConversationResource>> {
    return this.searchConversations$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<ConversationResource>>): Array<ConversationResource> => r.body)
    );
  }

}
